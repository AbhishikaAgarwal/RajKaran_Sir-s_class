****Rotation of array by d
	reverse(0,d-1)
	reverse(d,n-1)
	reverse(0,n-1)


Code :-	// Space complexity :- O(1)
	// Time complexity :- O(n)

#include<iostream>
using namespace std;

void reversal(int a[], int start, int end)
{
while(start<end)
swap(a[start++], a[--end]);
}

void print(int a[], int n)
{
for(int i = 0; i < n; i++)
cout<<a[i]<<" ";
}

int main()
{
int a[] = {1,2,3,4,5,6,7}, d = 2;
int n = sizeof(a) / sizeof(a[0]);

reversal(a,0,d);	// We have taken 0 to d because in reversal function we are not including last element
reversal(a,d,n);
reversal(a,0,n);
print(a,n);
}


If instead of writing the reversal function, if we would have used the predefined reverse function,
then we would have written 
reverse(a, 0, d-1)
reverse(a, d, n-1)
reverse(a, 0, n-1)


*** Pangram

A pangram is a string which contains all the english alphabets

s = "abcdefghijklmnopqrstuvwxyz" is a pangram
whereas s1 = "abcd" is not

Take a string as input and print all the characters missing in it to form a pangram in alphabetical order

#include<iostream>
using namespace std;

int main()
{
string s;
cin>>s;
bool a[26] = {};
for(int i = 0; i < s.size(); i++)
	a[s[i] - 'a'] = 1;
for(int i = 0; i < 26; i++)
	if(a[i] == 0)
	cout<<(char)(i+'a');
}


** Given 2 strings; specify the minimum number of deletions needed to make both the strings anagram of each other.

#include<iostream>
using namespace std;
int main()
{
string s = "abc", t = "cba";
int a[26] = {}, b[26] = {}, cnt = 0;
for(int i = 0; i < s.size(); i++)
	a[s[i]-'a']++;
for(int i = 0; i < t.size(); i++)
	b[t[i]-'a']++;
for(int i = 0; i < 26; i++)
	cnt += abs(a[i] - b[i]);
cout<<cnt<<endl;
}


Code with a very little better space complexity for anagrams

#include<iostream>
using namespace std;
int main()
{
string s = "abc", t = "afdh";
int a[26] = {}, cnt = 0;
for(int i = 0; i < s.size(); i++)
	a[s[i]-'a']++;
for(int i = 0; i < t.size(); i++)
	a[t[i]-'a']--;
for(int i = 0; i < 26; i++)
	cnt += abs(a[i]);
cout<<cnt<<endl;
}


** Given two strings. We are not allowed to delete any character, all we can do is modify characters.  
      Tell the minimum number of operations needed so that the two strings become anagram of each other.

eg :- S = "abc";
        T = "bca";
        O/P :-  0 as the two strings are already anagram of each other.
eg :- S = "abc"
        T = "bcd"
        O/P :- 1 as we can either change a to d in string S or we can change d to a in string T 

Space complexity :- O(number of alphabets)
Time complexity :- O(max( size of string, number of alphabets))

#include<iostream>
using namespace std;
 
int main()
{
string s = "abc", t = "bcd";
int a[26] = {}, cnt = 0;
for(int i = 0; i < s.size(); i++)
a[s[i] - 'a']++;
for(int i = 0; i < t.size(); i++)
a[t[i] - 'a']++;
for(int i = 0; i < s.size(); i++)
cnt += abs(a[i]);
cout<<cnt/2;
}

OR

#include<iostream>
using namespace std;
 
int main()
{
string s = "abc", t = "bcd";
int a[26] = {}, cnt = 0;
for(int i = 0; i < s.size(); i++)
a[s[i] - 'a']++;
for(int i = 0; i < t.size(); i++)
a[t[i] - 'a']++;
for(int i = 0; i < s.size(); i++)
if(a[i]>0)
cnt += a[i];
cout<<cnt;
}


#include<iostream>
using namespace std;
 
int main()
{
string s = "abc", t = "bcd";
int a[26] = {}, cnt = 0;
for(int i = 0; i < s.size(); i++)
a[s[i] - 'a']++;
for(int i = 0; i < t.size(); i++)
a[t[i] - 'a']++;
for(int i = 0; i < s.size(); i++)
if(a[i]!=0)
cnt += abs(a[i]);
cout<<cnt/2;
}


** Product Problem
Given an array and print the product of all the values except the current element.

eg :- a[] = {1,2,3,4}
        Output = 24 12 8 6	

Approach :- Calculate the product of all the values in the array and store it in a variable p;
	   Then iterate through the loop and keep dividing p by the current element
p = 24;
24/1 = 24	;   24/2 = 12;    24/3 = 8;   24/4 = 6

Now let's say we are not allowed to use division.

In this case, we will make 2 more arrays; one will store the left product and the other will store the right product and finally multiply them

a[] = {1,2,3,4}
left_product = {1,1,2,6}
right_product = {24,12,4,1}
result = left_product[i]*right_product[i];

Time Complexity :- O(n)
Space Complexity :- O(n)

#include<iostream>
using namespace std;
int main()
{
int a[] = { 1, 2, 3, 4};
int n = sizeof(a)/sizeof(0);
int left[n], right[n];
left[0]=1;
for(int i = 1; i<n; i++)
left[i] = left[i-1]*a[i-1];
right[n-1] = 1;
for(int i = n-2; i >=0; i--)
right[i] = right[i+1]*a[i+1];
for(int i = 0; i < n; i++)
cout<<left[i]*right[i]<<" ";
}

OR we can do using just one array

#include<iostream>
using namespace std;
int main()
{
int a[] = { 1, 2, 3, 4};
int n = sizeof(a)/sizeof(0);
int left[n];
left[0]=1;
for(int i = 1; i<n; i++)
left[i] = left[i-1]*a[i-1];
int right = 1;
for(int i = n-1; i >=0; i--){
left[i] = left[i]*right;
right = right*a[i];
}
for(int i = 0; i < n; i++)
cout<<left[i]<<" ";
}